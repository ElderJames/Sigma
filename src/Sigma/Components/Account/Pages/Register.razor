@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Sigma.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="main__b__1">
    <div class="register">
        <h3>注册</h3>
        <Form Model="@Input" Method="post" Name="register" OnFinish="RegisterUser">
            @if (Message != null)
            {
                <Alert Type="error">@Message</Alert>
            }
            <FormItem>
                <Input Placeholder="邮箱" @bind-Value="@Input.Email" Size="@InputSize.Large"></Input>
            </FormItem>

            <FormItem>
                <Input Placeholder="At Least 6-Digit Password, Case Sensitive" @bind-Value="@Input.Password" Size="@InputSize.Large" Type="password"></Input>
            </FormItem>

            <FormItem>
                <Input Placeholder="Confirm Password" @bind-Value="@Input.ConfirmPassword" Size="@InputSize.Large" Type="password"></Input>
            </FormItem>

      @*       <FormItem>
                <InputGroup Compact Size="@InputSize.Large" Style="display: table">
                    <Select TItem="string"
                            TItemValue="string"
                            DefaultValue=@("+86")
                            Style="width: 25%"
                            Size="large">
                        <SelectOptions>
                            <SelectOption TItem="string" TItemValue="string" Value="@("+86")" Label="+86" />
                            <SelectOption TItem="string" TItemValue="string" Value="@("+87")" Label="+87" />
                        </SelectOptions>
                    </Select>
                    <AntDesign.Input Placeholder="Phone Number" Style="width: 75%;" @bind-Value="@context.Phone"></AntDesign.Input>
                </InputGroup>
            </FormItem>

            <FormItem>
                <FormItem>
                    <Row Gutter="8">
                        <AntDesign.Col Span="16">
                            <AntDesign.Input Placeholder="Verification Code" @bind-Value="@context.Captcha" Size="@InputSize.Large"></AntDesign.Input>
                        </AntDesign.Col>
                        <AntDesign.Col Span="8">
                            <Button Size="large" Block>Get Code</Button>
                        </AntDesign.Col>
                    </Row>
                </FormItem>
            </FormItem> *@

            <FormItem>
                <Button Type="primary" Size="large" HtmlType="submit" class="submit">注册</Button>
                <a class="login" href="/account/login">已经注册？使用已有账号登录</a>
            </FormItem>
        </Form>
    </div>
</div>

@* <div class="col-md-6 col-md-offset-2">
    <section>
        <h3>Use another service to register.</h3>
        <hr />
        <ExternalLoginPicker />
    </section>
</div> *@
@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
